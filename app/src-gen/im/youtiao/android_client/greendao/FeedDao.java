package im.youtiao.android_client.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import im.youtiao.android_client.greendao.Feed;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FEED.
*/
public class FeedDao extends AbstractDao<Feed, Long> {

    public static final String TABLENAME = "FEED";

    /**
     * Properties of entity Feed.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, String.class, "serverId", false, "SERVER_ID");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property Symbol = new Property(3, String.class, "symbol", false, "SYMBOL");
        public final static Property IsStarred = new Property(4, Boolean.class, "isStarred", false, "IS_STARRED");
        public final static Property CreatedAt = new Property(5, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property ChannelId = new Property(6, long.class, "channelId", false, "CHANNEL_ID");
        public final static Property CreatedBy = new Property(7, long.class, "createdBy", false, "CREATED_BY");
    };

    private DaoSession daoSession;

    private Query<Feed> channel_FeedsQuery;

    public FeedDao(DaoConfig config) {
        super(config);
    }
    
    public FeedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FEED' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SERVER_ID' TEXT NOT NULL UNIQUE ," + // 1: serverId
                "'TEXT' TEXT," + // 2: text
                "'SYMBOL' TEXT," + // 3: symbol
                "'IS_STARRED' INTEGER," + // 4: isStarred
                "'CREATED_AT' INTEGER," + // 5: createdAt
                "'CHANNEL_ID' INTEGER NOT NULL ," + // 6: channelId
                "'CREATED_BY' INTEGER NOT NULL );"); // 7: createdBy
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_FEED_SERVER_ID ON FEED" +
                " (SERVER_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FEED'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Feed entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getServerId());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String symbol = entity.getSymbol();
        if (symbol != null) {
            stmt.bindString(4, symbol);
        }
 
        Boolean isStarred = entity.getIsStarred();
        if (isStarred != null) {
            stmt.bindLong(5, isStarred ? 1l: 0l);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(6, createdAt.getTime());
        }
        stmt.bindLong(7, entity.getChannelId());
        stmt.bindLong(8, entity.getCreatedBy());
    }

    @Override
    protected void attachEntity(Feed entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Feed readEntity(Cursor cursor, int offset) {
        Feed entity = new Feed( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // serverId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // symbol
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isStarred
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // createdAt
            cursor.getLong(offset + 6), // channelId
            cursor.getLong(offset + 7) // createdBy
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Feed entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.getString(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSymbol(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsStarred(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setCreatedAt(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setChannelId(cursor.getLong(offset + 6));
        entity.setCreatedBy(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Feed entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Feed entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "feeds" to-many relationship of Channel. */
    public List<Feed> _queryChannel_Feeds(long channelId) {
        synchronized (this) {
            if (channel_FeedsQuery == null) {
                QueryBuilder<Feed> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChannelId.eq(null));
                queryBuilder.orderRaw("CREATED_AT DESC");
                channel_FeedsQuery = queryBuilder.build();
            }
        }
        Query<Feed> query = channel_FeedsQuery.forCurrentThread();
        query.setParameter(0, channelId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getChannelDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM FEED T");
            builder.append(" LEFT JOIN CHANNEL T0 ON T.'CHANNEL_ID'=T0.'_id'");
            builder.append(" LEFT JOIN USER T1 ON T.'CREATED_BY'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Feed loadCurrentDeep(Cursor cursor, boolean lock) {
        Feed entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Channel channel = loadCurrentOther(daoSession.getChannelDao(), cursor, offset);
         if(channel != null) {
            entity.setChannel(channel);
        }
        offset += daoSession.getChannelDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public Feed loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Feed> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Feed> list = new ArrayList<Feed>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Feed> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Feed> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
