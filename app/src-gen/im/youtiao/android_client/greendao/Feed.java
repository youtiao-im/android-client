package im.youtiao.android_client.greendao;

import java.util.List;
import im.youtiao.android_client.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table FEED.
 */
public class Feed implements java.io.Serializable {

    private Long id;
    /** Not-null value. */
    private String serverId;
    private String text;
    private String symbol;
    private Boolean isStarred;
    private java.util.Date createdAt;
    private long channelId;
    private long createdBy;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient FeedDao myDao;

    private Channel channel;
    private Long channel__resolvedKey;

    private User user;
    private Long user__resolvedKey;

    private List<Comment> comments;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Feed() {
    }

    public Feed(Long id) {
        this.id = id;
    }

    public Feed(Long id, String serverId, String text, String symbol, Boolean isStarred, java.util.Date createdAt, long channelId, long createdBy) {
        this.id = id;
        this.serverId = serverId;
        this.text = text;
        this.symbol = symbol;
        this.isStarred = isStarred;
        this.createdAt = createdAt;
        this.channelId = channelId;
        this.createdBy = createdBy;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFeedDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getServerId() {
        return serverId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setServerId(String serverId) {
        this.serverId = serverId;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    public Boolean getIsStarred() {
        return isStarred;
    }

    public void setIsStarred(Boolean isStarred) {
        this.isStarred = isStarred;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public long getChannelId() {
        return channelId;
    }

    public void setChannelId(long channelId) {
        this.channelId = channelId;
    }

    public long getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(long createdBy) {
        this.createdBy = createdBy;
    }

    /** To-one relationship, resolved on first access. */
    public Channel getChannel() {
        long __key = this.channelId;
        if (channel__resolvedKey == null || !channel__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChannelDao targetDao = daoSession.getChannelDao();
            Channel channelNew = targetDao.load(__key);
            synchronized (this) {
                channel = channelNew;
            	channel__resolvedKey = __key;
            }
        }
        return channel;
    }

    public void setChannel(Channel channel) {
        if (channel == null) {
            throw new DaoException("To-one property 'channelId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.channel = channel;
            channelId = channel.getId();
            channel__resolvedKey = channelId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        long __key = this.createdBy;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        if (user == null) {
            throw new DaoException("To-one property 'createdBy' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.user = user;
            createdBy = user.getId();
            user__resolvedKey = createdBy;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Comment> getComments() {
        if (comments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommentDao targetDao = daoSession.getCommentDao();
            List<Comment> commentsNew = targetDao._queryFeed_Comments(id);
            synchronized (this) {
                if(comments == null) {
                    comments = commentsNew;
                }
            }
        }
        return comments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComments() {
        comments = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
