package im.youtiao.android_client.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 17): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 17;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        GroupDao.createTable(db, ifNotExists);
        BulletinDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        GroupDao.dropTable(db, ifExists);
        BulletinDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(GroupDao.class);
        registerDaoClass(BulletinDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    public static class DaoHelper {

        public static Bulletin insertOrUpdate(DaoSession daoSession, Bulletin entity) {
            BulletinDao bulletinDao = daoSession.getBulletinDao();
            Bulletin bulletin = bulletinDao.queryBuilder().where(BulletinDao.Properties.ServerId.eq(entity.getServerId())).unique();
            if (bulletin == null) {
                long rowId = bulletinDao.insert(entity);
                entity.setId(rowId);
                return entity;
            } else {
                bulletin.setServerId(entity.getServerId());
                bulletin.setJson(entity.getJson());
                bulletinDao.update(bulletin);
                return bulletin;
            }
        }

        public static Bulletin getOldestBulletin(DaoSession daoSession) {
            BulletinDao bulletinDao = daoSession.getBulletinDao();
            Bulletin bulletin = bulletinDao.queryBuilder().orderAsc(BulletinDao.Properties.CreatedAt).limit(1).unique();
            return bulletin;
        }

        public static Group insertOrUpdate(DaoSession daoSession, Group entity) {
            GroupDao groupDao = daoSession.getGroupDao();
            Group group = groupDao.queryBuilder().where(GroupDao.Properties.ServerId.eq(entity.getServerId())).unique();
            if (group == null) {
                long rowId = groupDao.insert(entity);
                entity.setId(rowId);
                return entity;
            } else {
                group.setServerId(entity.getServerId());
                group.setJson(entity.getJson());
                groupDao.update(group);
                return group;
            }
        }
    }
}
